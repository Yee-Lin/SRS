<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SRS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SRS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Apr 11 14:55:05 2022
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MX_ETH_Init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e0]">__user_initial_stackheap</a>
 <LI><a href="#[e]">SVC_Handler</a>
 <LI><a href="#[10]">PendSV_Handler</a>
 <LI><a href="#[11]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[100]">osRtxThreadListRoot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">osRtxThreadListRoot</a><BR>
 <LI><a href="#[195]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[195]">net_sys_error</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a0]">Control</a> from emac_stm32f4xx.o(i.Control) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[9f]">ControlTimer</a> from emac_stm32f4xx.o(i.ControlTimer) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[60]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">ETH_IRQHandler</a> from emac_stm32f4xx.o(i.ETH_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[93]">GetCapabilities</a> from emac_stm32f4xx.o(i.GetCapabilities) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[91]">GetLinkInfo</a> from phy_dp83848c.o(i.GetLinkInfo) referenced from phy_dp83848c.o(.constdata)
 <LI><a href="#[90]">GetLinkState</a> from phy_dp83848c.o(i.GetLinkState) referenced from phy_dp83848c.o(.constdata)
 <LI><a href="#[97]">GetMacAddress</a> from emac_stm32f4xx.o(i.GetMacAddress) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[9c]">GetRxFrameSize</a> from emac_stm32f4xx.o(i.GetRxFrameSize) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[9d]">GetRxFrameTime</a> from emac_stm32f4xx.o(i.GetRxFrameTime) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[9e]">GetTxFrameTime</a> from emac_stm32f4xx.o(i.GetTxFrameTime) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[8a]">GetVersion</a> from phy_dp83848c.o(i.GetVersion) referenced 2 times from phy_dp83848c.o(.constdata)
 <LI><a href="#[61]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8b]">Initialize</a> from phy_dp83848c.o(i.Initialize) referenced 2 times from phy_dp83848c.o(.constdata)
 <LI><a href="#[b]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a1]">PHY_Read</a> from emac_stm32f4xx.o(i.PHY_Read) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[a2]">PHY_Write</a> from emac_stm32f4xx.o(i.PHY_Write) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8d]">PowerControl</a> from phy_dp83848c.o(i.PowerControl) referenced 2 times from phy_dp83848c.o(.constdata)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9b]">ReadFrame</a> from emac_stm32f4xx.o(i.ReadFrame) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from mci_stm32f4xx.o(i.SDIO_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9a]">SendFrame</a> from emac_stm32f4xx.o(i.SendFrame) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[99]">SetAddressFilter</a> from emac_stm32f4xx.o(i.SetAddressFilter) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[8e]">SetInterface</a> from phy_dp83848c.o(i.SetInterface) referenced from phy_dp83848c.o(.constdata)
 <LI><a href="#[98]">SetMacAddress</a> from emac_stm32f4xx.o(i.SetMacAddress) referenced from emac_stm32f4xx.o(.constdata)
 <LI><a href="#[8f]">SetMode</a> from phy_dp83848c.o(i.SetMode) referenced from phy_dp83848c.o(.constdata)
 <LI><a href="#[11]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[11]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[14]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from stm32f4xx_it.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[85]">ThreadMonitor</a> from monitor.o(i.ThreadMonitor) referenced from monitor.o(i.InitMonitor)
 <LI><a href="#[46]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8c]">Uninitialize</a> from phy_dp83848c.o(i.Uninitialize) referenced 2 times from phy_dp83848c.o(.constdata)
 <LI><a href="#[d]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c2]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[a6]">eth0_callback</a> from net_config.o(i.eth0_callback) referenced from net_config.o(.constdata)
 <LI><a href="#[86]">nbns_listener</a> from net_nbns_client.o(i.nbns_listener) referenced from net_nbns_client.o(i.net_nbns_client_init)
 <LI><a href="#[88]">netCore_Thread</a> from net_sys.o(i.netCore_Thread) referenced from net_config.o(i.netos_thread_create)
 <LI><a href="#[87]">netETH_Thread</a> from net_eth.o(i.netETH_Thread) referenced from net_config.o(i.netif_create)
 <LI><a href="#[a9]">net_arp_cache_init</a> from net_arp.o(i.net_arp_cache_init) referenced from net_config.o(.constdata)
 <LI><a href="#[b1]">net_arp_cache_run</a> from net_arp.o(i.net_arp_cache_run) referenced from net_config.o(.constdata)
 <LI><a href="#[b7]">net_arp_cache_uninit</a> from net_arp.o(i.net_arp_cache_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[a4]">net_eth_config_mcast</a> from net_eth.o(i.net_eth_config_mcast) referenced from net_config.o(.constdata)
 <LI><a href="#[bd]">net_eth_get_option</a> from net_eth.o(i.net_eth_get_option) referenced from net_config.o(.constdata)
 <LI><a href="#[a7]">net_eth_iface_init</a> from net_eth.o(i.net_eth_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[af]">net_eth_iface_run</a> from net_eth.o(i.net_eth_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[b5]">net_eth_iface_uninit</a> from net_eth.o(i.net_eth_iface_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[a5]">net_eth_output</a> from net_eth.o(i.net_eth_output) referenced from net_config.o(.constdata)
 <LI><a href="#[a3]">net_eth_send_frame</a> from net_eth.o(i.net_eth_send_frame) referenced from net_config.o(.constdata)
 <LI><a href="#[be]">net_eth_set_option</a> from net_eth.o(i.net_eth_set_option) referenced from net_config.o(.constdata)
 <LI><a href="#[aa]">net_ip4_frag_init</a> from net_ip4_frag.o(i.net_ip4_frag_init) referenced from net_config.o(.constdata)
 <LI><a href="#[b2]">net_ip4_frag_run</a> from net_ip4_frag.o(i.net_ip4_frag_run) referenced from net_config.o(.constdata)
 <LI><a href="#[b8]">net_ip4_frag_uninit</a> from net_ip4_frag.o(i.net_ip4_frag_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[a8]">net_loop_iface_init</a> from net_loopback.o(i.net_loop_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[b0]">net_loop_iface_run</a> from net_loopback.o(i.net_loop_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[b6]">net_loop_iface_uninit</a> from net_loopback.o(i.net_loop_iface_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[bf]">net_loop_send_frame</a> from net_loopback.o(i.net_loop_send_frame) referenced from net_loopback.o(.constdata)
 <LI><a href="#[ae]">net_nbns_client_init</a> from net_nbns_client.o(i.net_nbns_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[bc]">net_nbns_client_uninit</a> from net_nbns_client.o(i.net_nbns_client_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[ab]">net_ping_client_init</a> from net_ping_core.o(i.net_ping_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[b3]">net_ping_client_run</a> from net_ping_core.o(i.net_ping_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[b9]">net_ping_client_uninit</a> from net_ping_core.o(i.net_ping_client_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[89]">net_sys_tick</a> from net_sys.o(i.net_sys_tick) referenced from net_config.o(i.netos_timer_create)
 <LI><a href="#[ad]">net_tcp_socket_init</a> from net_tcp.o(i.net_tcp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[b4]">net_tcp_socket_run</a> from net_tcp.o(i.net_tcp_socket_run) referenced from net_config.o(.constdata)
 <LI><a href="#[bb]">net_tcp_socket_uninit</a> from net_tcp.o(i.net_tcp_socket_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[ac]">net_udp_socket_init</a> from net_udp.o(i.net_udp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[ba]">net_udp_socket_uninit</a> from net_udp.o(i.net_udp_socket_uninit) referenced from net_config.o(.constdata)
 <LI><a href="#[71]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[80]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[81]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[82]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[84]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[c1]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[c0]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[72]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[83]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[65]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[66]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[67]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[68]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[69]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[6a]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[6b]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[6c]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[6d]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[6e]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[6f]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[70]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[73]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[74]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced from rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[75]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[76]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[77]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[78]">svcRtxThreadFlagsClear</a> from rtx_thread.o(.text.svcRtxThreadFlagsClear) referenced from rtx_thread.o(.text.osThreadFlagsClear)
 <LI><a href="#[79]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[7a]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[7b]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[7c]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced from rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[7d]">svcRtxThreadYield</a> from rtx_thread.o(.text.svcRtxThreadYield) referenced from rtx_thread.o(.text.osThreadYield)
 <LI><a href="#[7e]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[7f]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced from rtx_timer.o(.text.osTimerStart)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c2]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[207]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[208]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[209]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[20a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[20b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ca]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[20c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[210]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[211]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[212]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[213]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[214]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[215]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[216]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[217]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[218]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[219]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[220]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[221]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[222]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[223]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[224]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[225]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[226]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[227]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[c8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[228]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[cc]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ce]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[d0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_ETH_Init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[229]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[22a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[d7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f407xx.o(RESET)
<LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[144]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[22b]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[db]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[22c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[dd]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[230]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_uninit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_uninit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_uninit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_uninit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_uninit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_init
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[233]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cd]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[235]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[119]"></a>OS_Tick_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[118]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[117]"></a>OS_Tick_Setup</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[200]"></a>osDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[204]"></a>osKernelGetState</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[201]"></a>osKernelGetTickFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
</UL>

<P><STRONG><a name="[e9]"></a>osKernelInitialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>osKernelStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>osMessageQueueGet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadMonitor
</UL>

<P><STRONG><a name="[15e]"></a>osMessageQueueNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMonitor
</UL>

<P><STRONG><a name="[f1]"></a>osMessageQueuePut</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[184]"></a>osMutexAcquire</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>

<P><STRONG><a name="[185]"></a>osMutexDelete</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[186]"></a>osMutexNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>

<P><STRONG><a name="[187]"></a>osMutexRelease</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>

<P><STRONG><a name="[f3]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[ea]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[11a]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[105]"></a>osRtxMemoryFree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[80]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[f2]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[f6]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[e3]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[fa]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[fb]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[fc]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[d9]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[f0]"></a>osRtxPostProcess</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[ff]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[fe]"></a>osRtxThreadDispatch</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[f7]"></a>osRtxThreadListGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[107]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[e7]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[fd]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>

<P><STRONG><a name="[101]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[f8]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[109]"></a>osRtxThreadStartup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[10d]"></a>osRtxThreadSwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[10a]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[e5]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[da]"></a>osRtxTick_Handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c1]"></a>osRtxTimerSetup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[c0]"></a>osRtxTimerThread</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[1fe]"></a>osSemaphoreAcquire</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>

<P><STRONG><a name="[1fd]"></a>osSemaphoreDelete</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreDelete))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_delete
</UL>

<P><STRONG><a name="[1fc]"></a>osSemaphoreNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[10f]"></a>osSemaphoreRelease</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>

<P><STRONG><a name="[83]"></a>osThreadExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[111]"></a>osThreadFlagsClear</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsClear))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
</UL>

<P><STRONG><a name="[113]"></a>osThreadFlagsSet</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>

<P><STRONG><a name="[114]"></a>osThreadFlagsWait</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>

<P><STRONG><a name="[15f]"></a>osThreadNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMonitor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[115]"></a>osThreadTerminate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_delete
</UL>

<P><STRONG><a name="[116]"></a>osThreadYield</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadYield))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
</UL>

<P><STRONG><a name="[202]"></a>osTimerNew</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
</UL>

<P><STRONG><a name="[203]"></a>osTimerStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, emac_stm32f4xx.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[125]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[123]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
</UL>

<P><STRONG><a name="[12c]"></a>HAL_ETH_Init</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_ETH_MspDeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_ETH_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ETH_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[12d]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspDeInit
</UL>

<P><STRONG><a name="[128]"></a>HAL_GPIO_Init</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[165]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[136]"></a>HAL_I2C_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[139]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspDeInit
</UL>

<P><STRONG><a name="[135]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[134]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[13a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13d]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[138]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[143]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[145]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[146]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>

<P><STRONG><a name="[17f]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[14b]"></a>HAL_SD_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_SD_InitCard</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_SD_MspInit</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[152]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[155]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>InitMonitor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, monitor.o(i.InitMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>SDIO_ConfigData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[179]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[17e]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[17a]"></a>SDIO_GetResponse</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, mci_stm32f4xx.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>SDIO_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[14e]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[17d]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[169]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[168]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[16b]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[14a]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[16d]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[16e]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[170]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[172]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[173]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[175]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[176]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[177]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[181]"></a>SystemClock_Config</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[85]"></a>ThreadMonitor</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, monitor.o(i.ThreadMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ThreadMonitor &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(i.InitMonitor)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[c4]"></a>_mutex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[c5]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_lib.o(i._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[c6]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[cf]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[d3]"></a>main</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = main &rArr; MX_ETH_Init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[88]"></a>netCore_Thread</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, net_sys.o(i.netCore_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netCore_Thread &rArr; netos_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(i.netos_thread_create)
</UL>
<P><STRONG><a name="[196]"></a>netETH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[19d]"></a>netETH_ReceiveRaw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_ReceiveRaw))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[87]"></a>netETH_Thread</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netETH_Thread &rArr; eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(i.netif_create)
</UL>
<P><STRONG><a name="[182]"></a>netInitialize</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net_sys.o(i.netInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netInitialize &rArr; net_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadMonitor
</UL>

<P><STRONG><a name="[194]"></a>netMAC_aton</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, net_addr.o(i.netMAC_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netMAC_aton &rArr; net_xtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_xtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[198]"></a>net_addr4_aton</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, net_addr.o(i.net_addr4_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[1dd]"></a>net_addr4_to_mac</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_addr.o(i.net_addr4_to_mac))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[1cd]"></a>net_addr_find_route</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_addr_find_route &rArr; net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[1cf]"></a>net_addr_get_local</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_get_local))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[1fb]"></a>net_addr_is_unspec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_is_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[1a1]"></a>net_arp_cache_add</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_arp_cache_add &rArr; arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[1a0]"></a>net_arp_cache_early</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_arp_cache_early &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[1d4]"></a>net_arp_cache_find</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_arp_cache_find &rArr; arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[a9]"></a>net_arp_cache_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net_arp.o(i.net_arp_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_arp_cache_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>net_arp_cache_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_arp.o(i.net_arp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_arp_cache_run &rArr; arp_cache_run &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>net_arp_cache_uninit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_arp.o(i.net_arp_cache_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_arp_cache_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>net_arp_enqueue</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_arp_enqueue &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[19c]"></a>net_arp_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_arp.o(i.net_arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_arp_notify &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
</UL>

<P><STRONG><a name="[19e]"></a>net_arp_process</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_arp_process &rArr; net_arp_cache_add &rArr; arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_sender_valid
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[1cc]"></a>net_atoi</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net_common.o(i.net_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
</UL>

<P><STRONG><a name="[1b4]"></a>net_chksum_buf</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, net_common.o(i.net_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>

<P><STRONG><a name="[199]"></a>net_crc_buf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net_common.o(i.net_crc_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_crc_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
</UL>

<P><STRONG><a name="[192]"></a>net_eth_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_eth.o(i.net_eth_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_callback
</UL>

<P><STRONG><a name="[a4]"></a>net_eth_config_mcast</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_config_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_eth_config_mcast &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_mcast
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>net_eth_get_option</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_get_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_eth_get_option
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_opt_len
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>net_eth_iface_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_eth_iface_init &rArr; eth_iface_init &rArr; net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>net_eth_iface_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = net_eth_iface_run &rArr; eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>net_eth_iface_uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_iface_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_eth_iface_uninit &rArr; eth_iface_uninit &rArr; netif_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>net_eth_output</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>net_eth_send_frame</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_to_mac
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>net_eth_set_option</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_eth_set_option &rArr; net_arp_notify &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_opt_len
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_mtu_limit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>net_icmp_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_icmp.o(i.net_icmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[1a4]"></a>net_icmp_process</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, net_icmp.o(i.net_icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_icmp_process &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
</UL>

<P><STRONG><a name="[1e1]"></a>net_icmp_send_echo</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_icmp.o(i.net_icmp_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[1db]"></a>net_igmp_collect_mcast</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.net_igmp_collect_mcast))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[1e3]"></a>net_igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.net_igmp_is_member))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[1a5]"></a>net_igmp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(i.net_igmp_process))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[19f]"></a>net_ip4_chk_frame</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = net_ip4_chk_frame &rArr; ip4_get_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
</UL>

<P><STRONG><a name="[1e5]"></a>net_ip4_chksum</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = net_ip4_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1df]"></a>net_ip4_chksum_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_ip4_chksum_buf &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[1ce]"></a>net_ip4_find_route</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
</UL>

<P><STRONG><a name="[1e6]"></a>net_ip4_frag_add</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, net_ip4_frag.o(i.net_ip4_frag_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_ip4_frag_add &rArr; frag_map_session &rArr; que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_map_session
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
</UL>

<P><STRONG><a name="[1e7]"></a>net_ip4_frag_get</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, net_ip4_frag.o(i.net_ip4_frag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[aa]"></a>net_ip4_frag_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4_frag.o(i.net_ip4_frag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_ip4_frag_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>net_ip4_frag_run</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_ip4_frag.o(i.net_ip4_frag_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_ip4_frag_run &rArr; que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>net_ip4_frag_uninit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4_frag.o(i.net_ip4_frag_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_ip4_frag_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>net_ip4_get_local</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_get_local))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[1e8]"></a>net_ip4_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_init))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[1d2]"></a>net_ip4_is_onlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_onlink))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>

<P><STRONG><a name="[1de]"></a>net_ip4_is_subcast</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_subcast))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[1a2]"></a>net_ip4_reass_frame</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_reass_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_ip4_reass_frame &rArr; net_ip4_frag_add &rArr; frag_map_session &rArr; que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[1e0]"></a>net_ip4_send_frame</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[1e2]"></a>net_ip4_tx_offl_hl</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_tx_offl_hl))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>

<P><STRONG><a name="[1ea]"></a>net_ip4_uninit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_uninit
</UL>

<P><STRONG><a name="[a8]"></a>net_loop_iface_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_loopback.o(i.net_loop_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_loop_iface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>net_loop_iface_run</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_loopback.o(i.net_loop_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_loop_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>net_loop_iface_uninit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_loopback.o(i.net_loop_iface_uninit))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>net_loop_send_frame</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_loopback.o(i.net_loop_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_loop_send_frame &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_loopback.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>net_mem_alloc</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[1d6]"></a>net_mem_avail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_mem.o(i.net_mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[18e]"></a>net_mem_free</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[1c8]"></a>net_mem_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[ae]"></a>net_nbns_client_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, net_nbns_client.o(i.net_nbns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_nbns_client_init &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>net_nbns_client_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_nbns_client.o(i.net_nbns_client_uninit))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>net_ping_client_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ping_core.o(i.net_ping_client_init))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>net_ping_client_run</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_ping_core.o(i.net_ping_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_ping_client_run &rArr; ping_send_req &rArr; net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>net_ping_client_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_ping_core.o(i.net_ping_client_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_ping_client_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>net_rand32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_sys.o(i.net_rand32))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1b9]"></a>net_strtoupper</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_common.o(i.net_strtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_strtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[195]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(i.net_sys_error))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>

<P><STRONG><a name="[1bd]"></a>net_sys_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[18c]"></a>net_sys_resume</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[89]"></a>net_sys_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_sys_tick &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(i.netos_timer_create)
</UL>
<P><STRONG><a name="[1bf]"></a>net_sys_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1ac]"></a>net_sys_wakeup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_tick
</UL>

<P><STRONG><a name="[1a6]"></a>net_tcp_process</STRONG> (Thumb, 1230 bytes, Stack size 56 bytes, net_tcp.o(i.net_tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
</UL>

<P><STRONG><a name="[ad]"></a>net_tcp_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_tcp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>net_tcp_socket_run</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, net_tcp.o(i.net_tcp_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = net_tcp_socket_run &rArr; tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>net_tcp_socket_uninit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_socket_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_tcp_socket_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>net_udp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_get_buf &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[1eb]"></a>net_udp_get_socket</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[1ec]"></a>net_udp_open</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_udp.o(i.net_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[1a3]"></a>net_udp_process</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, net_udp.o(i.net_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = net_udp_process &rArr; net_ip4_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
</UL>

<P><STRONG><a name="[1bc]"></a>net_udp_send_if</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, net_udp.o(i.net_udp_send_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[ac]"></a>net_udp_socket_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_udp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>net_udp_socket_uninit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_socket_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_udp_socket_uninit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>net_xtoul</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_common.o(i.net_xtoul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_xtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
</UL>

<P><STRONG><a name="[19a]"></a>netif_create</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net_config.o(i.netif_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_create
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[1a8]"></a>netif_delete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_config.o(i.netif_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_uninit
</UL>

<P><STRONG><a name="[1aa]"></a>netif_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(i.netif_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>

<P><STRONG><a name="[1ae]"></a>netif_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netif_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netif_unlock &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>

<P><STRONG><a name="[1c4]"></a>netos_delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, net_config.o(i.netos_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[1c2]"></a>netos_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_config.o(i.netos_flag_clear))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1d9]"></a>netos_flag_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netos_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
</UL>

<P><STRONG><a name="[1c0]"></a>netos_flag_wait</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_config.o(i.netos_flag_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_flag_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1c6]"></a>netos_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_config.o(i.netos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_init
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[1b6]"></a>netos_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(i.netos_lock))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[1c7]"></a>netos_mutex_create</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_config.o(i.netos_mutex_create))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>

<P><STRONG><a name="[1c9]"></a>netos_thread_create</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_config.o(i.netos_thread_create))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[1c3]"></a>netos_thread_pass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netos_thread_pass))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1ca]"></a>netos_timer_create</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_config.o(i.netos_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_timer_create &rArr; osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[1be]"></a>netos_timer_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_config.o(i.netos_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1b8]"></a>netos_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.netos_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[f4]"></a>osRtxErrorNotify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[71]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[cb]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[238]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[239]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[160]"></a>MX_CAN1_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>MX_CAN2_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>MX_DMA_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>MX_ETH_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(i.MX_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MX_ETH_Init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>MX_GPIO_Init</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>MX_I2C1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>MX_SDIO_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_SDIO_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MX_SDIO_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_lib.o(i.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[91]"></a>GetLinkInfo</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, phy_dp83848c.o(i.GetLinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>GetLinkState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, phy_dp83848c.o(i.GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, phy_dp83848c.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, phy_dp83848c.o(i.Initialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>PowerControl</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, phy_dp83848c.o(i.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>SetInterface</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, phy_dp83848c.o(i.SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>SetMode</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, phy_dp83848c.o(i.SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>Uninitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phy_dp83848c.o(i.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>Control</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Control &rArr; init_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>ControlTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.ControlTimer))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>GetMacAddress</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>GetRxFrameSize</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetRxFrameSize))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>GetRxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetRxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>GetTxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.GetTxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, emac_stm32f4xx.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>Initialize</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.Initialize))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>PHY_Read</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.PHY_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PHY_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>PHY_Write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.PHY_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PHY_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>PowerControl</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PowerControl &rArr; HAL_ETH_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspDeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>ReadFrame</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, emac_stm32f4xx.o(i.ReadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>SendFrame</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, emac_stm32f4xx.o(i.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>SetAddressFilter</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, emac_stm32f4xx.o(i.SetAddressFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetAddressFilter &rArr; crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>SetMacAddress</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.SetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>Uninitialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>crc32_8bit_rev</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.crc32_8bit_rev))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>

<P><STRONG><a name="[180]"></a>crc32_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, emac_stm32f4xx.o(i.crc32_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddressFilter
</UL>

<P><STRONG><a name="[120]"></a>init_dma</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, emac_stm32f4xx.o(i.init_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[1b1]"></a>init_rx_desc</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.init_rx_desc))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>

<P><STRONG><a name="[1b2]"></a>init_tx_desc</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, emac_stm32f4xx.o(i.init_tx_desc))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>

<P><STRONG><a name="[140]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[141]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[12b]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[12a]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[124]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f4xx_hal_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[122]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 566 bytes, Stack size 200 bytes, stm32f4xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[17b]"></a>SD_FindSCR</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[150]"></a>SD_InitCard</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, stm32f4xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[14f]"></a>SD_PowerON</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[148]"></a>SD_WideBus_Disable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[147]"></a>SD_WideBus_Enable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[16f]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdError))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
</UL>

<P><STRONG><a name="[16a]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 418 bytes, Stack size 28 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[174]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[16c]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[178]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 180 bytes, Stack size 28 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDMMC_GetCmdResp6
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[171]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[a6]"></a>eth0_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_config.o(i.eth0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eth0_callback &rArr; net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>ms2tick</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_config.o(i.ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[e2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[ec]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[66]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[67]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[68]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxKernelInitialize &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[69]"></a>svcRtxKernelStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[112]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>

<P><STRONG><a name="[11d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsClear
</UL>

<P><STRONG><a name="[e6]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[11e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[108]"></a>ThreadFlagsCheck</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[104]"></a>osRtxThreadBlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[10b]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[e8]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[102]"></a>osRtxThreadDestroy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[103]"></a>osRtxThreadFree</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[106]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[100]"></a>osRtxThreadListRoot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[84]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[77]"></a>svcRtxThreadExit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxThreadFlagsClear</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadFlagsClear
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsClear)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxThreadNew</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxThreadYield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxThreadYield &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadYield)
</UL>
<P><STRONG><a name="[65]"></a>svcRtxDelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[10e]"></a>TimerInsert</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[11f]"></a>TimerRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[72]"></a>osRtxTimerTick</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[7e]"></a>svcRtxTimerNew</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxTimerStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[6d]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[6e]"></a>svcRtxMutexDelete</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[6f]"></a>svcRtxMutexNew</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[70]"></a>svcRtxMutexRelease</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[110]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[82]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[73]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[74]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[75]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[76]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[ee]"></a>MessageQueueGet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[f9]"></a>MessageQueuePut</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[f5]"></a>MessageQueueRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[e4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[81]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[6a]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[6b]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[6c]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[1c5]"></a>eth_check_link</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, net_eth.o(i.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[1da]"></a>eth_if_map</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_eth.o(i.eth_if_map))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[193]"></a>eth_iface_init</STRONG> (Thumb, 484 bytes, Stack size 16 bytes, net_eth.o(i.eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eth_iface_init &rArr; net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_mtu_limit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[19b]"></a>eth_iface_run</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, net_eth.o(i.eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_ReceiveRaw
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[1a7]"></a>eth_iface_uninit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, net_eth.o(i.eth_iface_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_iface_uninit &rArr; netif_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_uninit
</UL>

<P><STRONG><a name="[1a9]"></a>eth_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[197]"></a>eth_mtu_limit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_eth.o(i.eth_mtu_limit))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
</UL>

<P><STRONG><a name="[1dc]"></a>eth_opt_len</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_eth.o(i.eth_opt_len))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
</UL>

<P><STRONG><a name="[1ab]"></a>eth_receive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_eth.o(i.eth_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[1ad]"></a>eth_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[1d3]"></a>arp_cache_alloc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[188]"></a>arp_cache_run</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_cache_run &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[1d1]"></a>arp_is_cacheable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[189]"></a>arp_probe_run</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_arp.o(i.arp_probe_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_probe_run &rArr; arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
</UL>

<P><STRONG><a name="[18d]"></a>arp_proc_response</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, net_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_proc_response &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[18a]"></a>arp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_arp.o(i.arp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[18f]"></a>arp_send_reply</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_send_reply &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[18b]"></a>arp_send_request</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_send_request &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
</UL>

<P><STRONG><a name="[1d7]"></a>arp_sender_valid</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, net_arp.o(i.arp_sender_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arp_sender_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[1af]"></a>frag_map_session</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_ip4_frag.o(i.frag_map_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frag_map_session &rArr; que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>

<P><STRONG><a name="[1b0]"></a>que_free_list</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_ip4_frag.o(i.que_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_map_session
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_run
</UL>

<P><STRONG><a name="[1fa]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[1ee]"></a>tcp_map_socket</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_map_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1f3]"></a>tcp_parse_opt</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1f0]"></a>tcp_proc_acknr</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_proc_acknr &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1ef]"></a>tcp_proc_dupack</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1f9]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[1f8]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[1f7]"></a>tcp_que_resend</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[1f2]"></a>tcp_send_ctrl</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[205]"></a>tcp_send_data</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[1f5]"></a>tcp_send_reset</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1f6]"></a>tcp_set_cwnd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1f1]"></a>tcp_transit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[206]"></a>tcp_write</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, net_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[86]"></a>nbns_listener</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, net_nbns_client.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nbns_listener &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_nbns_client.o(i.net_nbns_client_init)
</UL>
<P><STRONG><a name="[1ed]"></a>ping_send_req</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ping_core.o(i.ping_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ping_send_req &rArr; net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
</UL>

<P><STRONG><a name="[1c1]"></a>sys_proc_tick</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_sys.o(i.sys_proc_tick))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1b3]"></a>ip4_get_chksum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_get_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[1e4]"></a>ip4_get_mtu</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[1b5]"></a>mem_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[1b7]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[1d8]"></a>crc32_8bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_common.o(i.crc32_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
